// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  user_id           String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  user_id      String
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model WritingLike {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String
  user       User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  guest      Guest?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  writing_id String
  writing    Writing @relation(fields: [writing_id], references: [id], onDelete: Cascade)

  @@map("writing_likes")
  @@unique([writing_id, user_id])
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  writing_likes WritingLike[]

  @@map("users")
}

model Guest {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  writing_likes WritingLike[]

  @@map("guests")
}

model Writing {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  slug          String
  writing_likes WritingLike[]

  @@map("writings")
}


model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
