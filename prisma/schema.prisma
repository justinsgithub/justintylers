generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Reply {
  created_at DateTime @default(now())
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  body       String
  user_id    String
  user       User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  guest      Guest?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  likes      Like[]

  comment_id String
  comment    Comment @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  parent_id String?
  parent    Reply?  @relation("nested_replies", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Reply[] @relation("nested_replies")

  @@unique([comment_id, user_id])
  @@unique([parent_id, user_id])
  @@map("replies")
}

model Comment {
  created_at DateTime @default(now())
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  body       String
  user_id    String
  user       User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  guest      Guest?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  writing_id String
  likes      Like[]
  writing    Writing  @relation(fields: [writing_id], references: [id], onDelete: Cascade)
  replies    Reply[]

  @@unique([writing_id, user_id])
  @@map("comments")
}

model Like {
  created_at DateTime @default(now())
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String
  user       User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  guest      Guest?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  content_id String
  writing    Writing? @relation(fields: [content_id], references: [id], onDelete: Cascade)
  comment    Comment? @relation(fields: [content_id], references: [id], onDelete: Cascade)
  reply      Reply?   @relation(fields: [content_id], references: [id], onDelete: Cascade)

  @@unique([content_id, user_id])
  @@map("likes")
}

model User {
  created_at    DateTime  @default(now())
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  likes         Like[]
  comments      Comment[]
  replies       Reply[]

  @@map("users")
}

model Guest {
  created_at DateTime  @default(now())
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  likes      Like[]
  comments   Comment[]
  replies    Reply[]

  @@map("guests")
}

model Writing {
  created_at DateTime  @default(now())
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  slug       String
  likes      Like[]
  comments   Comment[]

  @@unique(slug)
  @@map("writings")
}

// Necessary for Next auth
model Account {
  created_at        DateTime @default(now())
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  created_at   DateTime @default(now())
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  created_at DateTime @default(now())
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
