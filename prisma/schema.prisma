// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  created_at        DateTime @default(now())
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id           String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  created_at   DateTime @default(now())
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  user_id      String
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model DeletedComment {
  deleted_at DateTime @default(now())
  created_at DateTime
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  body       String
  user_id    String
  user       User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  guest      Guest?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  content_id String
  likes      Like[]
  writing    Writing? @relation(fields: [content_id], references: [id], onDelete: Cascade)

  children DeletedComment[] @relation("replies")
  parent   DeletedComment?  @relation("replies", fields: [content_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("deleted_comments")
}

model Comment {
  created_at DateTime @default(now())
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  body       String
  user_id    String
  user       User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  guest      Guest?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  content_id String
  likes      Like[]
  writing    Writing? @relation(fields: [content_id], references: [id], onDelete: Cascade)

  children Comment[] @relation("replies")
  parent   Comment?  @relation("replies", fields: [content_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([content_id, user_id])
  @@map("comments")
}

model Like {
  created_at      DateTime        @default(now())
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  user_id         String
  user            User?           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  guest           Guest?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  content_id      String
  writing         Writing?        @relation(fields: [content_id], references: [id], onDelete: Cascade)
  comment         Comment?        @relation(fields: [content_id], references: [id], onDelete: Cascade)
  deleted_comment DeletedComment? @relation(fields: [content_id], references: [id], onDelete: Cascade)

  @@unique([content_id, user_id])
  @@map("likes")
}

model User {
  created_at       DateTime         @default(now())
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  likes            Like[]
  comments         Comment[]
  deleted_comments DeletedComment[]

  @@map("users")
}

model Guest {
  created_at       DateTime         @default(now())
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  likes            Like[]
  comments         Comment[]
  deleted_comments DeletedComment[]

  @@map("guests")
}

model Writing {
  created_at       DateTime         @default(now())
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  slug             String
  likes            Like[]
  comments         Comment[]
  deleted_comments DeletedComment[]

  @@unique(slug)
  @@map("writings")
}

model VerificationToken {
  created_at DateTime @default(now())
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
